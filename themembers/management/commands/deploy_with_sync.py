"""
Comando Django para deploy com sincroniza√ß√£o autom√°tica
"""
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.utils import timezone
import os
import sys

class Command(BaseCommand):
    help = 'Executa deploy completo com migra√ß√µes e sincroniza√ß√£o TheMembers'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-migrations',
            action='store_true',
            help='Pula as migra√ß√µes e executa apenas sincroniza√ß√£o',
        )
        parser.add_argument(
            '--skip-sync',
            action='store_true',
            help='Pula a sincroniza√ß√£o e executa apenas migra√ß√µes',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa execu√ß√£o mesmo em ambiente de desenvolvimento',
        )
    
    def handle(self, *args, **options):
        from django.conf import settings
        
        # Verifica se est√° em produ√ß√£o ou se force foi especificado
        if settings.DEBUG and not options['force']:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è Executando em modo DEBUG. Use --force para continuar.')
            )
            return
        
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando deploy com sincroniza√ß√£o autom√°tica...')
        )
        
        start_time = timezone.now()
        
        try:
            # PASSO 1: Executar migra√ß√µes
            if not options['skip_migrations']:
                self.stdout.write('üì¶ Executando migra√ß√µes...')
                call_command('migrate', verbosity=1)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Migra√ß√µes conclu√≠das')
                )
            else:
                self.stdout.write('‚è≠Ô∏è Pulando migra√ß√µes...')
            
            # PASSO 2: Coletar arquivos est√°ticos
            self.stdout.write('üìÅ Coletando arquivos est√°ticos...')
            call_command('collectstatic', '--noinput', verbosity=1)
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Arquivos est√°ticos coletados')
            )
            
            # PASSO 3: Sincronizar produtos TheMembers
            if not options['skip_sync']:
                self.stdout.write('üîÑ Sincronizando produtos TheMembers...')
                call_command('sync_themembers_products', '--silent', verbosity=1)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Sincroniza√ß√£o TheMembers conclu√≠da')
                )
            else:
                self.stdout.write('‚è≠Ô∏è Pulando sincroniza√ß√£o...')
            
            # PASSO 4: Verificar integridade
            self.stdout.write('üîç Verificando integridade do sistema...')
            call_command('check', verbosity=1)
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Verifica√ß√£o de integridade conclu√≠da')
            )
            
            # Resumo final
            end_time = timezone.now()
            duration = end_time - start_time
            
            self.stdout.write(
                self.style.SUCCESS(
                    f'üéâ Deploy conclu√≠do com sucesso em {duration.total_seconds():.1f} segundos!'
                )
            )
            
            # Informa√ß√µes adicionais
            self.stdout.write('\nüìä Informa√ß√µes do sistema:')
            self.stdout.write(f'   ‚Ä¢ Ambiente: {"Produ√ß√£o" if not settings.DEBUG else "Desenvolvimento"}')
            self.stdout.write(f'   ‚Ä¢ Tempo total: {duration.total_seconds():.1f}s')
            self.stdout.write(f'   ‚Ä¢ Data/Hora: {end_time.strftime("%d/%m/%Y %H:%M:%S")}')
            
            if not options['skip_sync']:
                # Mostrar produtos sincronizados
                try:
                    from themembers.models import TheMembersProduct
                    product_count = TheMembersProduct.objects.count()
                    self.stdout.write(f'   ‚Ä¢ Produtos TheMembers: {product_count}')
                except Exception:
                    pass
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro durante deploy: {str(e)}')
            )
            sys.exit(1)
